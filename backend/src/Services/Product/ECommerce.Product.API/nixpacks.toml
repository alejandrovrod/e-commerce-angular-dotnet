# nixpacks.toml

# Fuerza el proveedor de C#/.NET
providers = ["csharp"]

[variables]
# Fija la versión del SDK que instalará Nixpacks
NIXPACKS_CSHARP_SDK_VERSION = "9.0"
DOTNET_CLI_TELEMETRY_OPTOUT = "1"
DOTNET_SKIP_FIRST_TIME_EXPERIENCE = "1"

# Para ASP.NET Core: expone en 0.0.0.0:8080
ASPNETCORE_URLS = "http://0.0.0.0:8080"

# FORZAR modo invariant - sobrescribe variable de entorno de Railway
DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = "1"

[phases.setup]
# SDK 9 + librerías nativas comunes para .NET
# (usa el atributo de nixpkgs para .NET 9)
nixPkgs = [
  "dotnetCorePackages.dotnet_9.sdk",
  "zlib",
  "openssl"
]

# También exporta algunas como libs en LD_LIBRARY_PATH
nixLibs = ["zlib", "openssl"]

[phases.install]
cmds = [
  "dotnet restore backend/ECommerce.sln --nologo"
]
# Acelera builds cacheando el paquete NuGet
cacheDirectories = ["~/.nuget/packages"]

[phases.build]
# Publica a carpeta 'out' (framework-dependent)
cmds = [
  "dotnet publish backend/src/Services/Product/ECommerce.Product.API/ECommerce.Product.API.csproj --no-restore -c Release -o out"
]

[start]
# El provider de C# de Nixpacks arranca desde ./out
cmd = "./out"
