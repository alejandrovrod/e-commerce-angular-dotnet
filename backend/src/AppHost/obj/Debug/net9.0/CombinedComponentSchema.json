{
  "definitions": {
    "logLevel": {
      "properties": {
        "StackExchange.Redis": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.ChangeTracking": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Command": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Connection": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Database.Transaction": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Infrastructure": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Migrations": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Model": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Model.Validation": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Query": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.EntityFrameworkCore.Update": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "MongoDB": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "MongoDB.Command": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "MongoDB.Connection": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "MongoDB.Internal": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "MongoDB.SDAM": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "MongoDB.ServerSelection": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Core": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Identity": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Messaging.ServiceBus": {
          "$ref": "#/definitions/logLevelThreshold"
        }
      }
    }
  },
  "properties": {
    "Aspire": {
      "type": "object",
      "properties": {
        "StackExchange": {
          "type": "object",
          "properties": {
            "Redis": {
              "type": "object",
              "properties": {
                "ConfigurationOptions": {
                  "type": "object",
                  "properties": {
                    "AbortOnConnectFail": {
                      "type": "boolean",
                      "description": "Gets or sets whether connect/configuration timeouts should be explicitly notified via a TimeoutException."
                    },
                    "AllowAdmin": {
                      "type": "boolean",
                      "description": "Indicates whether admin operations should be allowed."
                    },
                    "AsyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for asynchronous operations (defaults to SyncTimeout)."
                    },
                    "ChannelPrefix": {
                      "type": "object",
                      "properties": {
                        "UseImplicitAutoPattern": {
                          "type": "boolean",
                          "description": "Indicates whether channels should use \u0027StackExchange.Redis.RedisChannel.PatternMode.Auto\u0027 when no \u0027StackExchange.Redis.RedisChannel.PatternMode\u0027 is specified; this is enabled by default, but can be disabled to avoid unexpected wildcard scenarios."
                        }
                      },
                      "description": "Automatically encodes and decodes channels."
                    },
                    "CheckCertificateRevocation": {
                      "type": "boolean",
                      "description": "A Boolean value that specifies whether the certificate revocation list is checked during authentication."
                    },
                    "ClientName": {
                      "type": "string",
                      "description": "The client name to use for all connections."
                    },
                    "ConfigCheckSeconds": {
                      "type": "integer",
                      "description": "Check configuration every n seconds (every minute by default)."
                    },
                    "ConfigurationChannel": {
                      "type": "string",
                      "description": "Channel to use for broadcasting and listening for configuration change notification."
                    },
                    "ConnectRetry": {
                      "type": "integer",
                      "description": "The number of times to repeat the initial connect cycle if no servers respond promptly."
                    },
                    "ConnectTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that should be allowed for connection (defaults to 5 seconds unless SyncTimeout is higher)."
                    },
                    "DefaultDatabase": {
                      "type": "integer",
                      "description": "Specifies the default database to be used when calling \u0027StackExchange.Redis.ConnectionMultiplexer.GetDatabase(System.Int32,System.Object)\u0027 without any parameters."
                    },
                    "DefaultVersion": {
                      "type": "string",
                      "description": "The server version to assume."
                    },
                    "HeartbeatConsistencyChecks": {
                      "type": "boolean",
                      "description": "Whether to enable ECHO checks on every heartbeat to ensure network stream consistency. This is a rare measure to react to any potential network traffic drops ASAP, terminating the connection."
                    },
                    "HeartbeatInterval": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Controls how often the connection heartbeats. A heartbeat includes: - Evaluating if any messages have timed out. - Evaluating connection status (checking for failures). - Sending a server message to keep the connection alive if needed."
                    },
                    "HighIntegrity": {
                      "type": "boolean",
                      "description": "A Boolean value that specifies whether to use per-command validation of strict protocol validity. This sends an additional command after EVERY command which incurs measurable overhead."
                    },
                    "IncludeDetailInExceptions": {
                      "type": "boolean",
                      "description": "Whether exceptions include identifiable details (key names, additional .Data annotations)."
                    },
                    "IncludePerformanceCountersInExceptions": {
                      "type": "boolean",
                      "description": "Whether exceptions include performance counter details."
                    },
                    "KeepAlive": {
                      "type": "integer",
                      "description": "Specifies the time in seconds at which connections should be pinged to ensure validity. -1 Defaults to 60 Seconds."
                    },
                    "LibraryName": {
                      "type": "string",
                      "description": "Gets or sets the library name to use for CLIENT SETINFO lib-name calls to Redis during handshake. Defaults to \u0022SE.Redis\u0022."
                    },
                    "Password": {
                      "type": "string",
                      "description": "The password to use to authenticate with the server."
                    },
                    "Protocol": {
                      "enum": [
                        "Resp2",
                        "Resp3"
                      ],
                      "description": "Specify the redis protocol type."
                    },
                    "Proxy": {
                      "enum": [
                        "None",
                        "Twemproxy",
                        "Envoyproxy"
                      ],
                      "description": "Type of proxy to use (if any); for example \u0027StackExchange.Redis.Proxy.Twemproxy\u0027."
                    },
                    "ResolveDns": {
                      "type": "boolean",
                      "description": "Indicates whether endpoints should be resolved via DNS before connecting. If enabled the ConnectionMultiplexer will not re-resolve DNS when attempting to re-connect after a connection failure."
                    },
                    "ServiceName": {
                      "type": "string",
                      "description": "The service name used to resolve a service via sentinel."
                    },
                    "SetClientLibrary": {
                      "type": "boolean",
                      "description": "Gets or sets whether the library should identify itself by library-name/version when possible."
                    },
                    "Ssl": {
                      "type": "boolean",
                      "description": "Indicates whether the connection should be encrypted."
                    },
                    "SslHost": {
                      "type": "string",
                      "description": "The target-host to use when validating SSL certificate; setting a value here enables SSL mode."
                    },
                    "SslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "Configures which SSL/TLS protocols should be allowed.  If not set, defaults are chosen by the .NET framework."
                    },
                    "SyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for synchronous operations (defaults to 5 seconds)."
                    },
                    "TieBreaker": {
                      "type": "string",
                      "description": "Tie-breaker used to choose between primaries (must match the endpoint exactly)."
                    },
                    "User": {
                      "type": "string",
                      "description": "The username to use to authenticate with the server."
                    }
                  },
                  "description": "The options relevant to a set of redis connections."
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the comma-delimited configuration string used to connect to the Redis server."
                },
                "DisableHealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the Redis health check is disabled or not.",
                  "default": false
                },
                "DisableTracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                  "default": false
                }
              },
              "description": "Provides the client configuration settings for connecting to a Redis server."
            }
          }
        },
        "Microsoft": {
          "type": "object",
          "properties": {
            "EntityFrameworkCore": {
              "type": "object",
              "properties": {
                "SqlServer": {
                  "type": "object",
                  "properties": {
                    "CommandTimeout": {
                      "type": "integer",
                      "description": "Gets or sets the time in seconds to wait for the command to execute."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "The connection string of the SQL server database to connect to."
                    },
                    "DisableHealthChecks": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the database health check is disabled or not.",
                      "default": false
                    },
                    "DisableRetry": {
                      "type": "boolean",
                      "description": "Gets or sets whether retries should be disabled.",
                      "default": false
                    },
                    "DisableTracing": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                      "default": false
                    }
                  },
                  "description": "Provides the client configuration settings for connecting to a SQL Server database using EntityFrameworkCore."
                }
              }
            }
          }
        },
        "MongoDB": {
          "type": "object",
          "properties": {
            "Driver": {
              "type": "object",
              "properties": {
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the connection string of the MongoDB database to connect to."
                },
                "DisableHealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the MongoDB health check is disabled or not.",
                  "default": false
                },
                "DisableTracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                  "default": false
                },
                "HealthCheckTimeout": {
                  "type": "integer",
                  "description": "Gets or sets a integer value that indicates the MongoDB health check timeout in milliseconds."
                }
              },
              "description": "Provides the client configuration settings for connecting to a MongoDB database using MongoDB driver."
            }
          }
        },
        "Azure": {
          "type": "object",
          "properties": {
            "Messaging": {
              "type": "object",
              "properties": {
                "ServiceBus": {
                  "type": "object",
                  "properties": {
                    "ClientOptions": {
                      "type": "object",
                      "properties": {
                        "ConnectionIdleTimeout": {
                          "type": "string",
                          "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                          "description": "The amount of time to allow a connection to have no observed traffic before considering it idle and eligible to close."
                        },
                        "CustomEndpointAddress": {
                          "type": "string",
                          "format": "uri",
                          "description": "A custom endpoint address that can be used when establishing the connection to the Service Bus service."
                        },
                        "EnableCrossEntityTransactions": {
                          "type": "boolean",
                          "description": "Gets or sets a flag that indicates whether or not transactions may span multiple Service Bus entities."
                        },
                        "Identifier": {
                          "type": "string",
                          "description": "A property used to set the \u0027Azure.Messaging.ServiceBus.ServiceBusClient\u0027 ID to identify the client. This can be used to correlate logs and exceptions. If null or empty, a random unique value will be used."
                        },
                        "RetryOptions": {
                          "type": "object",
                          "properties": {
                            "Delay": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The delay between retry attempts for a fixed approach or the delay on which to base calculations for a backoff-based approach."
                            },
                            "MaxDelay": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The maximum permissible delay between retry attempts."
                            },
                            "MaxRetries": {
                              "type": "integer",
                              "description": "The maximum number of retry attempts before considering the associated operation to have failed."
                            },
                            "Mode": {
                              "enum": [
                                "Fixed",
                                "Exponential"
                              ],
                              "description": "The approach to use for calculating retry delays."
                            },
                            "TryTimeout": {
                              "type": "string",
                              "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                              "description": "The maximum duration to wait for completion of a single attempt, whether the initial attempt or a retry."
                            }
                          },
                          "description": "The set of options to use for determining whether a failed service operation should be retried and, if so, the amount of time to wait between retry attempts.  These options also control the amount of time allowed for the individual network operations used for interactions with the Service Bus service."
                        },
                        "TransportType": {
                          "enum": [
                            "AmqpTcp",
                            "AmqpWebSockets"
                          ],
                          "description": "The type of protocol and transport that will be used for communicating with the Service Bus service."
                        }
                      },
                      "description": "The set of options that can be specified when creating an \u0027Azure.Messaging.ServiceBus.ServiceBusConnection\u0027 to configure its behavior."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "Gets or sets the connection string used to connect to the Service Bus namespace."
                    },
                    "DisableTracing": {
                      "type": "boolean",
                      "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                      "default": false
                    },
                    "FullyQualifiedNamespace": {
                      "type": "string",
                      "description": "Gets or sets the fully qualified Service Bus namespace."
                    },
                    "HealthCheckQueueName": {
                      "type": "string",
                      "description": "Name of the queue used by the health check. Mandatory to get health checks enabled."
                    },
                    "HealthCheckTopicName": {
                      "type": "string",
                      "description": "Name of the topic used by the health check. Mandatory to get health checks enabled."
                    }
                  },
                  "description": "Provides the client configuration settings for connecting to Azure Service Bus."
                }
              }
            }
          }
        }
      }
    }
  },
  "type": "object",
  "SourceSegments": "C:\\Users\\avalladares\\.nuget\\packages\\aspire.stackexchange.redis\\9.0.0\\ConfigurationSchema.json;C:\\Users\\avalladares\\.nuget\\packages\\aspire.microsoft.entityframeworkcore.sqlserver\\9.0.0\\ConfigurationSchema.json;C:\\Users\\avalladares\\.nuget\\packages\\aspire.mongodb.driver\\9.0.0\\ConfigurationSchema.json;C:\\Users\\avalladares\\.nuget\\packages\\aspire.azure.messaging.servicebus\\9.0.0\\ConfigurationSchema.json"
}