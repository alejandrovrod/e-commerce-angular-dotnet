
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ReverseProxy": {
    "Routes": {
      "orderservice": {
        "ClusterId": "orderservice",
        "Match": {
          "Path": "/api/order/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/order/{**catch-all}"
          }
        ]
      },
      "paymentservice": {
        "ClusterId": "paymentservice",
        "Match": {
          "Path": "/api/payment/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/payment/{**catch-all}"
          }
        ]
      },
      "fileservice": {
        "ClusterId": "fileservice",
        "Match": {
          "Path": "/api/file/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/file/{**catch-all}"
          }
        ]
      },
      "productservice": {
        "ClusterId": "productservice",
        "Match": {
          "Path": "/api/product/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/product/{**catch-all}"
          }
        ]
      },
      "userservice": {
        "ClusterId": "userservice",
        "Match": {
          "Path": "/api/user/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/user/{**catch-all}"
          }
        ]
      },
      "categoryservice": {
        "ClusterId": "categoryservice",
        "Match": {
          "Path": "/api/category/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/category/{**catch-all}"
          }
        ]
      },
      "brandservice": {
        "ClusterId": "brandservice",
        "Match": {
          "Path": "/api/brand/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/brand/{**catch-all}"
          }
        ]
      },
      "inventoryservice": {
        "ClusterId": "inventoryservice",
        "Match": {
          "Path": "/api/inventory/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/inventory/{**catch-all}"
          }
        ]
      }
    },
    "Clusters": {
      "orderservice": {
        "Destinations": {
          "destination1": {
            "Address": "https://localhost:7002"
          }
        }
      },
      "paymentservice": {
        "Destinations": {
          "destination1": {
            "Address": "https://localhost:7003"
          }
        }
      },
      "fileservice": {
        "Destinations": {
          "destination1": {
            "Address": "https://localhost:7004"
          }
        }
      },
      "productservice": {
        "Destinations": {
          "destination1": {
            "Address": "${PRODUCT_SERVICE_URL}"
          }
        }
      },
      "userservice": {
        "Destinations": {
          "destination1": {
            "Address": "${USER_SERVICE_URL}"
          }
        }
      },
      "categoryservice": {
        "Destinations": {
          "destination1": {
            "Address": "${PRODUCT_SERVICE_URL}"
          }
        }
      },
      "brandservice": {
        "Destinations": {
          "destination1": {
            "Address": "${PRODUCT_SERVICE_URL}"
          }
        }
      },
      "inventoryservice": {
        "Destinations": {
          "destination1": {
            "Address": "${PRODUCT_SERVICE_URL}"
          }
        }
      }
    }
  },
  "Serilog": {
    "Using": ["Serilog.Sinks.Console", "Serilog.Sinks.File"],
    "MinimumLevel": "Information",
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} {Properties:j}{NewLine}{Exception}"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "logs/api-gateway-.txt",
          "rollingInterval": "Day",
          "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} {Level:u3}] {Message:lj} {Properties:j}{NewLine}{Exception}"
        }
      }
    ]
  },
  
  "JwtSettings": {
    "SecretKey": "your-super-secret-jwt-key-here-must-be-at-least-32-characters",
    "Issuer": "ECommerce.ApiGateway",
    "Audience": "ECommerce.Client",
    "ExpirationMinutes": 60
  },

  "Redis": {
    "Host": "yamabiko.proxy.rlwy.net",
    "Port": 32361,
    "Password": "OmxdBkUKSYGGFzCTdGbweKpXusEGcErG",
    "User": "default"
  },
  "RabbitMQ": {
    "Host": "yamanote.proxy.rlwy.net",
    "Port": 57549,
    "Username": "SlDPlTyX9CSGWsoF",
    "Password": "Ocs_cFqZfrXvvZ9aIW7hqqBYZCH~T02d"
  }
}

